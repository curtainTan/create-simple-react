{"version":3,"sources":["react-dom/diff.js","react-dom/index.js","react/setState_queue.js","react/component.js","react/index.js","src/index.js"],"names":["diff","dom","vnode","container","console","log","ret","diffNode","appendChild","out","String","nodeType","textContent","document","createTextNode","parentNode","replaceNode","tag","diffComponent","createElement","diffAttribute","childrens","length","childNodes","diffChildren","vNode","comp","constructor","attrs","base","unmountComponent","removeNode","vChildren","domChildren","children","keyed","i","key","push","min","childrenLen","forEach","vChild","child","undefined","j","c","f","nextSibling","insertBefore","oldAttrs","newAttrs","attributes","element","name","value","ReactDOM","render","_render","createComponent","setComponentProps","Object","keys","setAttribute","props","instance","prototype","Component","componentWillReceiveProps","componentWillMount","renderComponent","renderer","componentWillUpdate","componentDidUpdate","componentDidMount","val","test","toLowerCase","k","v","style","cssText","removeAttribute","setStateQueue","renderQueue","defer","fn","Promise","resolve","then","enqueueSetState","stateChange","component","flush","some","item","shift","prevState","assign","state","Componet","React","ele","Home","Hometest","Tan","num","list","setState","preState","preProps","handleClick","bind","querySelector"],"mappings":"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","file":"src.ad8924f7.js","sourceRoot":"..","sourcesContent":["import { setAttribute, setComponentProps, createComponent } from \"./index.js\"\r\n\r\nexport function diff( dom, vnode, container ){\r\n    // 对比节点变化\r\n    console.log( \"组件vnode:----\", vnode )\r\n    const ret = diffNode( dom, vnode )\r\n\r\n    if( container ){\r\n        container.appendChild(  ret )\r\n    }\r\n\r\n    return ret\r\n}\r\n\r\nexport function diffNode( dom, vnode ){\r\n    let out = dom\r\n    if( vnode === undefined || vnode === null || typeof vnode === \"boolean\" ) return\r\n    // 数字转换成 字符串\r\n    if( typeof vnode === \"number\" ) vnode = String( vnode )\r\n    // 如果 vnode 是字符串，直接渲染\r\n    if( typeof vnode === \"string\" ){\r\n        // 创建文本节点\r\n        if( dom && dom.nodeType === 3 ){\r\n            if( dom.textContent !== vnode ){\r\n                // 更新文本内容\r\n                dom.textContent = vnode\r\n            }\r\n        } else {\r\n            out = document.createTextNode( vnode )\r\n            if( dom && dom.parentNode ){\r\n                dom.parentNode.replaceNode( out, dom )\r\n            }\r\n        }\r\n        return out\r\n    }\r\n\r\n    // 如果 tag 是组件\r\n    if( typeof vnode.tag === \"function\" ){\r\n        return diffComponent( out, vnode )\r\n    }\r\n\r\n    // 非文本 DOM 节点\r\n    if( !dom ){\r\n        out = document.createElement( vnode.tag )\r\n    }\r\n    diffAttribute( out, vnode )\r\n    // 比较子节点\r\n    if( vnode.childrens && vnode.childrens.length > 0 || ( out.childNodes && out.childNodes.length > 0 ) ){\r\n        // 对比组件 或 子节点\r\n        diffChildren( out, vnode.childrens )\r\n    }\r\n    return out\r\n}\r\n\r\nfunction diffComponent( dom, vNode ){\r\n    let comp = dom\r\n    // 如果组件没有变化 重新设置 props\r\n    if( comp && comp.constructor === vNode.tag ){\r\n        // 重新设置 props\r\n        setComponentProps( comp, vNode.attrs )\r\n        // 赋值\r\n        dom = comp.base\r\n    } else {\r\n        // 组件发生变化\r\n        if( comp ){\r\n            // 先移除组件\r\n            unmountComponent( comp )\r\n            comp = null\r\n        }\r\n        // 1. 创建新的节点\r\n        // 2. 设置组件属性\r\n        // 3. 给当前组件挂载 base\r\n        comp = createComponent( vNode.tag, vNode.attrs )\r\n        setComponentProps( comp ,vNode.attrs )\r\n        dom = comp.base\r\n    }\r\n    return dom\r\n}\r\n\r\nfunction unmountComponent( comp ){\r\n    removeNode( comp.base )\r\n}\r\n\r\nfunction removeNode( dom ){\r\n    if( dom && dom.parentNode ){\r\n        dom.parentNode.removeNode( dom )\r\n    }\r\n}\r\n\r\nfunction diffChildren( dom, vChildren ){\r\n    const domChildren = dom.childNodes\r\n    const children = []\r\n    const keyed = {}\r\n\r\n    // 将有 key 的节点（用对象保存）和没有 key 的节点（用数组保存）分开\r\n    if( domChildren && domChildren.length > 0 ){\r\n        for( let i = 0; i < domChildren.length; i ++ ){\r\n            if( vChildren[i].key ){\r\n                keyed[vChildren[i].key] = domChildren[i]\r\n            } else {\r\n                children.push( domChildren[i] )\r\n            }\r\n        }\r\n    }\r\n    if( vChildren && vChildren.length > 0 ){\r\n        let min = 0\r\n        let childrenLen = vChildren.length;\r\n        [ ...vChildren ].forEach( ( vChild, i ) => {\r\n            const key = vChild.key\r\n            let child\r\n            if( key ){\r\n                if( keyed[key] ){\r\n                    child = keyed[key]\r\n                    keyed[key] = undefined\r\n                }\r\n            } else if( childrenLen > min ){\r\n                for( let j = min; j < childrenLen; j ++ ){\r\n                    let c = children[j]\r\n                    if( c ){\r\n                        child = c\r\n                        children[j] = undefined\r\n                        if( j === childrenLen - 1 ) childrenLen --\r\n                        if( j === min ) min ++\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            child = diffNode( child, vChild )\r\n            // 更新 dom\r\n            const f = domChildren && domChildren[i]\r\n            if( child && child !== dom && child !== f ){\r\n                if( !f ){\r\n                    dom.appendChild( child )\r\n                } else if( child === f.nextSibling ){\r\n                    removeNode( f )\r\n                } else {\r\n                    dom.insertBefore( child, f )\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction diffAttribute( dom, vnode ){\r\n    // 保存之前 dom 的所有属性\r\n    let oldAttrs = {}\r\n    let newAttrs = vnode.attrs\r\n    // dom 是原有的节点对象 vnode 是虚拟dom\r\n    const attributes = dom.attributes;\r\n\r\n    if( attributes ){\r\n        [...attributes].forEach(element => {\r\n            oldAttrs[element.name] = element.value\r\n        })\r\n    }\r\n\r\n    // 比较\r\n    // 原来是属性跟新的属性对比，不在新的属性中，则将其移除掉(编程 undefined)\r\n    for( let key in oldAttrs ){\r\n        if( !(key in newAttrs ) ){\r\n            setAttribute( dom, key, undefined )\r\n        }\r\n    }\r\n    // 更新 属性\r\n    for( let key in newAttrs ){\r\n        if( oldAttrs[key] !== newAttrs[key] ){\r\n            setAttribute( dom, key, newAttrs[key] )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","// \"use strict\";\r\n// var ele = React.createElement(\"div\", {\r\n//   className: \"active\",\r\n//   title: \"tan\"\r\n// }, \"hello,\", React.createElement(\"span\", null, \"react\"));\r\n// ReactDOM.render( \"my React\", document.querySelector(\"#root\") )\r\n\r\nimport Component from \"../react/component\"\r\nimport { diff, diffNode } from \"./diff\"\r\n\r\nconst ReactDOM = {\r\n    render\r\n}\r\n\r\nfunction render( vnode, container, dom ){\r\n    return diff( dom, vnode, container )\r\n    // return container.appendChild( _render( vnode ) )\r\n}\r\n\r\nfunction _render( vnode ){\r\n    if( vnode === undefined || vnode === null || typeof vnode === \"boolean\" ) return\r\n\r\n    // 数字转换成 字符串\r\n    if( typeof vnode === \"number\" ) vnode = String( vnode )\r\n    // 如果 vnode 是字符串，直接渲染\r\n    if( typeof vnode === \"string\" ){\r\n        // 创建文本节点\r\n        return document.createTextNode( vnode )\r\n    }\r\n    // 如果 tag 是函数， 则渲染组件\r\n    if( typeof vnode.tag === \"function\" ){\r\n        // 1. 创建组件\r\n        const comp = createComponent( vnode.tag, vnode.attrs )\r\n        // 2. 设置组件的属性\r\n        setComponentProps( comp, vnode.attrs )\r\n        // 3. 返回组件渲染的节点对象\r\n        return comp.base\r\n    }\r\n    // vnode 是虚拟 DOM 对象\r\n    const { tag, attrs } = vnode\r\n    // 创建节点对象\r\n    const dom = document.createElement( tag )\r\n    // 绑定属性\r\n    if( attrs ){\r\n        Object.keys( attrs ).forEach( key => {\r\n            const value = attrs[key]\r\n            setAttribute( dom,  key, value )\r\n        })\r\n    }\r\n    // 渲染子节点\r\n    vnode.childrens && vnode.childrens.forEach( child => render( child, dom ) )\r\n    // 返回节点 并挂载子节点\r\n    return dom\r\n}\r\n\r\n\r\nexport function createComponent( comp, props ){\r\n    let instance\r\n    // 如果是类定义在组件，则创建实例  返回\r\n    if( comp.prototype && comp.prototype.render ){\r\n        instance = new comp( props )\r\n    } else {\r\n        // 函数组件 将函数组件扩展成 类组件   方便统一管理\r\n        instance = new Component( props )\r\n        instance.constructor = comp\r\n        // 定义 render 函数\r\n        instance.render = function(){\r\n            return this.constructor( props )\r\n        }\r\n    }\r\n    return instance\r\n}\r\n\r\n// 设置组件属性\r\nexport function setComponentProps( comp, props ){\r\n    if( !comp.base ){\r\n        // 生命周期 -------   willMount\r\n        if( comp.componentWillMount ){\r\n            comp.componentWillMount()\r\n        }\r\n    } else if( comp.componentWillReceiveProps ){\r\n        comp.componentWillReceiveProps( props )\r\n    }\r\n    // 设置组件属性\r\n    comp.props = props\r\n    // 渲染组件\r\n    renderComponent( comp )\r\n}\r\n// 渲染组件\r\nexport function renderComponent( comp ){\r\n    console.log( \"类组件渲染前：\", comp )\r\n    const renderer = comp.render()\r\n    console.log( \"类组件渲染：\", renderer )\r\n    // let base = _render( renderer )\r\n    // 重新渲染\r\n    let base = diffNode( comp.base, renderer )\r\n    if( comp.base && comp.componentWillUpdate ){\r\n        comp.componentWillUpdate()\r\n    }\r\n    if( comp.base ){\r\n        if( comp.componentDidUpdate ) comp.componentDidUpdate()\r\n    } else if( comp.componentDidMount ){\r\n        comp.componentDidMount()\r\n    }\r\n\r\n    // 节点替换\r\n    // if( comp.base && comp.base.parentNode ){\r\n    //     comp.base.parentNode.replaceChild( base, comp.base )\r\n    // }\r\n\r\n    comp.base = base\r\n}\r\n\r\n/**\r\n * 设置属性\r\n * @param {*} dom \r\n * @param {*} key \r\n * @param {*} val \r\n */\r\nexport function setAttribute( dom, key, val ){\r\n    // 设置 类名\r\n    if( key === \"className\" ){\r\n        key = \"class\"\r\n    }\r\n    // 事件   onClick\r\n    if( /on\\w+/.test( key ) ){\r\n        // 转小写\r\n        key = key.toLowerCase()\r\n        dom[key] = val || \"\"\r\n    } else if( key === \"style\" ){\r\n        // 样式是字符串\r\n        if( !val || typeof val === \"string\" ){\r\n            dom.style.cssText = val || \"\"\r\n        } else {\r\n            // 样式是对象\r\n            for( let k in val ){\r\n                const { v } = val[ k ]\r\n                if( typeof v === \"number\" ){\r\n                    dom.style[k] = v + \"px\"\r\n                } else {\r\n                    dom.style[k] = v\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // 其他属性\r\n        if( key in dom ){\r\n            dom[key] = val || \"\"\r\n        }\r\n        if( val ){\r\n            // 更新值\r\n            dom.setAttribute( key, val )\r\n        } else {\r\n            dom.removeAttribute( key )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default ReactDOM\r\n","/**\r\n * 1. 异步更新 state\r\n * 2. 短时间内将多个 state合并到一个（队列当中）\r\n * 3. 一段时间之后，循环遍历，清空队列\r\n */\r\n\r\nimport { renderComponent } from \"../react-dom/index\"\r\n\r\nconst setStateQueue = []\r\n// 保存当前的组件\r\nconst renderQueue = []\r\n\r\nfunction defer( fn ){\r\n    return Promise.resolve().then( fn )\r\n}\r\n\r\nexport function enqueueSetState( stateChange, component ){\r\n\r\n    if( setStateQueue.length === 0 ){\r\n        defer( flush )\r\n        // setTimeout( () => {\r\n        //     flush()\r\n        // }, 60 )\r\n    }\r\n\r\n    // 1. 短时间内 合并多个 setState\r\n    setStateQueue.push({\r\n        stateChange,\r\n        component\r\n    })\r\n    // 如果 renderQueue 里面没有组件，添加到队列中\r\n    let res = renderQueue.some( item => {\r\n        return item === component\r\n    })\r\n    if( !res ){\r\n        // 证明是第一次添加\r\n        renderQueue.push( component )\r\n    }\r\n}\r\n\r\n// 一段时间后\r\nfunction flush(){\r\n    let item, component\r\n    while( item = setStateQueue.shift() ){\r\n        const { stateChange, component } = item\r\n        // 保存之前的状态\r\n        if( !component.prevState ){\r\n            component.prevState = Object.assign({}, component.state)\r\n        }\r\n        // \r\n        if( typeof stateChange === \"function\" ){\r\n            // 函数\r\n            Object.assign( component.state, stateChange( component.prevState, component.props ) )\r\n        } else {\r\n            // 对象\r\n            Object.assign( component.state, stateChange )\r\n        }\r\n        // 赋值\r\n        component.prevState = component.state\r\n    }\r\n\r\n    while( component = renderQueue.shift() ){\r\n        renderComponent( component )\r\n    }\r\n}\r\n","// import { renderComponent } from \"../react-dom\"\r\nimport { enqueueSetState } from \"./setState_queue\"\r\n\r\nclass Componet {\r\n    constructor( props = {} ){\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    setState( stateChange ){\r\n        // 对象拷贝\r\n        // Object.assign( this.state, stateChange )\r\n        // // 渲染组件\r\n        // renderComponent( this )\r\n\r\n        enqueueSetState( stateChange, this )\r\n    }\r\n}\r\n\r\n\r\nexport default Componet\r\n","import Component from \"./component\"\r\n\r\nconst React = {\r\n    createElement,\r\n    Component\r\n}\r\n\r\nfunction createElement( tag, attrs, ...childrens ){\r\n    attrs = attrs || {}\r\n    return {\r\n        tag,\r\n        attrs,\r\n        childrens,\r\n        key: attrs.key || null\r\n    }\r\n}\r\n\r\nexport default React\r\n","import React from \"../react/index.js\"\r\nimport ReactDOM from \"../react-dom/index.js\"\r\n\r\nconst ele = (\r\n    <div className=\"active\" title=\"tan\">\r\n        hello,<span>react</span>\r\n        <Home name=\"arr name\" />\r\n        <Hometest />\r\n    </div>\r\n)\r\n\r\n// react核心：组件化开发\r\n\r\n// 两个问题：\r\n// 1. 为什么 ReactDOM.render() 函数需要引入 React  需要使用 React.createElement() 生成 vnode\r\n// 2. 组件：函数组件 类组件\r\n\r\n\r\n// 函数组件\r\nfunction Home(){\r\n    return (\r\n        <div className=\"active\" title=\"tan\">\r\n            hello,<span>react</span>\r\n            <Tan tan=\"我是传进来的参数\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Hometest {\r\n    render(){\r\n        return (\r\n            <div>我是测试的 Hometest 组件</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Tan extends React.Component {\r\n\r\n    constructor(props){\r\n        super( props )\r\n        this.state = {\r\n            num: 0,\r\n            list: [ 1,2,3,4,5 ]\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        console.log( \"组件将要加载--\" )\r\n    }\r\n\r\n    componentWillReceiveProps( props ){\r\n        console.log( \"componentWillReceiveProps\", props )\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log( \"组件加载完成--\" )\r\n        for( let i = 0; i < 10; i ++  ){\r\n            this.setState( ( preState, preProps ) => {\r\n                return {\r\n                    num: preState.num + 1\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        console.log( \"组件将要更新\" )\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log( \"组件更新完成\" )\r\n    }\r\n    \r\n    handleClick(){\r\n        // 修改状态的方法是调用 setState\r\n        console.log( \"数据改变了--\" )\r\n        this.setState({\r\n            num: this.state.num + 1\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"active\">\r\n                <h1>我是类组件-----{ this.state.num }</h1>\r\n                <button onClick={ this.handleClick.bind( this ) } >点击</button>\r\n                {/* {\r\n                    this.state.list.map( item => {\r\n                        return <p>{ item }</p>\r\n                    })\r\n                } */}\r\n                <h1>数组的长度：{ this.state.list.length }</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render( <Home name=\"arr name\" />, document.querySelector(\"#root\") )\r\n// ReactDOM.render( <Tan />, document.querySelector(\"#root\") )\r\n\r\n// console.log( ele )\r\n\r\n// \"use strict\";\r\n\r\n// var ele = React.createElement(\"div\", {\r\n//   className: \"active\",\r\n//   title: \"tan\"\r\n// }, \"hello,\", React.createElement(\"span\", null, \"react\"));\r\n// ReactDOM.render( \"my React\", document.querySelector(\"#root\") )\r\n\r\n\r\n\r\n"]}